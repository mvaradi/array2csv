import csv


class Writer(object):

    def __init__(self, data, identifier):
        self.data = data
        self.id = identifier

    def save_to_csv(self):
        """
        Write out the contents of the data into a CSV file

        :return: None
        """
        csv_output = open("%s_distogram.csv" % self.id, "w", newline='')
        writer = csv.writer(csv_output)
        # These are the expected headers
        writer.writerow(["residue1", "residue2", "distance"])
        n = len(self.data)
        for i in range(n):
            for j in range(n):
                self.conditional_write(i, j, writer)
        csv_output.close()

    def conditional_write(self, i, j, writer):
        """
        Only write out distance values <21
        This is because the interactive data visualisation would break with too many data points
        Luckily, values >21 are meaningless in terms of usability and so can be safely removed
        :param i: Number
        :param j: Number
        :param writer: CSV writer
        :return: None
        """
        if self.data[i][j] < 20:
            writer.writerow([i + 1, j + 1, "%.2f" % self.data[i][j]])

    def save_to_tiled_json(self):
        """
        Write out tiled JSON data into the expected JSON format

        Note: This requires the self.data to be a filed data which is
        generated by loader.create_tiled_data()
        :return: None
        """
        with open("%s_distogram.json" % self.id, "w") as json_output:
            json_output.write('[')

            num_of_levels = len(self.data)
            for m in range(num_of_levels):
                json_output.write('[')
                # The sub-matrixes have n x n dimensions
                n = len(self.data[m])
                values = []
                for i in range(n):
                    for j in range(n):
                        # Only write out distance values <21
                        # This is because the interactive data visualisation would break with too many data points
                        # Luckily, values >21 are meaningless in terms of usability and so can be safely removed
                        if self.data[m][i][j] < 21:
                            values.append('{"residue1": %i, "residue2": %i, "distance": %.2f}' % (
                                    i+1, j+1, self.data[m][i][j]
                            ))
                json_output.write(",".join(values))
                json_output.write(']')
                if m < num_of_levels - 1:
                    json_output.write(',')
            json_output.write(']')

    def save_to_json(self):
        """
        Write out the contents of the data into a JSON file after filtering
        the data

        :return: None
        """
        with open("%s_distogram.json" % self.id, "w") as json_output:
            json_output.write('[')
            for i in range(len(self.data)):
                json_output.write('[')
                json_output.write(','.join(str(self.turn_to_zero(x)) for x in self.data[i]))
                json_output.write(']')
                if i < len(self.data) - 1:
                    json_output.write(',')
            json_output.write(']')

    @staticmethod
    def turn_to_zero(value):
        """
        Simple method for filtering data
        :param value: Number
        :return: Number
        """
        if value >= 20:
            return 0
        return value
